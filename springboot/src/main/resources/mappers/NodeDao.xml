<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.lrb.dao.NodeDao">

    <resultMap id="poemResultMap" type="com.example.lrb.pojo.Node">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="images" property="images"/>
        <result column="address" property="address"/>
        <result column="videos" property="videos"/>
        <result column="user_id" property="userId"/>
        <result column="pageview" property="pageview"/>
        <result column="likes" property="likes"/>
        <result column="likeCount" property="likeCount"/>
        <result column="is_like" property="isLike"/>
        <result column="create_time" property="createTime"/>
        <result column="status" property="status"/>
        <result column="audit_status" property="auditStatus"/>
        <result column="authorized_file" property="authorizedFile"/>
        <result column="authorized_user" property="authorizedUser"/>
        <result column="authorized_time" property="authorizedTime"/>
        <association property="user" javaType="com.example.lrb.pojo.User">
            <id property="id" column="user_id"/>
            <result column="u_name" property="name"/>
            <result column="avatar" property="avatar"/>
        </association>
        <association property="merchant" javaType="com.example.lrb.pojo.Merchant">
            <id property="id" column="m_id"/>
            <result column="m_store_name" property="storeName"/>
        </association>
        <collection property="commentList" ofType="com.example.lrb.pojo.NodeComment">
            <id property="id" column="pco_id"/>
            <result property="parentId" column="parent_id"/>
            <result property="nodeId" column="pco_poem_id"/>
            <result property="fromId" column="from_id"/>
            <result property="toId" column="to_id"/>
            <result property="content" column="pco_content"/>
            <result property="createTime" column="pco_create_time"/>
            <result property="fromName" column="u_f_name"/>
            <result property="fromAvatar" column="u_f_avatar"/>
            <result property="toName" column="u_t_name"
            />
            <result property="toAvatar" column="u_t_avatar"/>
        </collection>
        <collection property="goodsList" ofType="com.example.lrb.pojo.Goods">
            <id property="id" column="g_id"/>
            <result property="title" column="g_title"/>
            <result property="content" column="g_content"/>
            <result property="price" column="g_price"/>
            <result property="images" column="g_images"/>
            <result property="createTime" column="g_create_time"/>
        </collection>
    </resultMap>
    <update id="increasePageview">
        UPDATE node
        SET pageview = pageview + 1
        WHERE
            id = #{nodeId}
    </update>
    <select id="queryListByUserId" resultMap="poemResultMap">
        SELECT
            p.*,
            u.avatar,
            u.NAME u_name,
            ( SELECT COUNT( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likeCount,
	        ( SELECT AVG( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likes
        FROM
            node p,
            USER u
        WHERE
            p.user_id = u.id
            AND u.id = #{userId}
        order by p.create_time desc
    </select>
    <select id="queryById" resultMap="poemResultMap">
        SELECT
            p.*,
            u.avatar,
            u.NAME u_name,
            ( SELECT AVG( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likes,
            ( SELECT COUNT( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likeCount,
            <if test="userId != null">
                ( SELECT count( 1 ) FROM node_like pl WHERE pl.node_id = p.id AND pl.user_id = #{userId} ) AS is_like,
            </if>
            pco.id pco_id,
            pco.parent_id,
            pco.node_id pco_poem_id,
            pco.from_id,
            pco.to_id,
            pco.content pco_content,
            pco.create_time pco_create_time,
            u_f.avatar u_f_avatar,
            u_f.NAME u_f_name,
            u_t.avatar u_t_avatar,
            u_t.NAME u_t_name,
            g.id g_id,
            g.title g_title,
            g.content g_content,
            g.price g_price,
            g.images g_images,
            g.create_time g_create_time
        FROM
            USER u,
            node p
            LEFT JOIN node_comment pco ON pco.node_id = p.id
            LEFT JOIN USER u_f ON pco.from_id = u_f.id
            LEFT JOIN USER u_t ON pco.to_id = u_t.id
            LEFT JOIN node_goods ng ON ng.node_id = p.id
            LEFT JOIN goods g ON ng.goods_id = g.id
        WHERE
            p.user_id = u.id
            and p.id = #{nodeId}
    </select>
    <select id="queryListByCategoryId" resultMap="poemResultMap">
        SELECT
            p.*,
            u.avatar,
            u.NAME u_name,
            ( SELECT COUNT( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likeCount,
            ( SELECT AVG( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likes
	        <if test="userId != null">
	        ,( SELECT count( 1 ) FROM node_like pl WHERE pl.node_id = p.id AND pl.user_id = #{userId} ) AS is_like
            </if>
        FROM
            node p,
            USER u
        WHERE
            p.user_id = u.id
            <if test="title != null and title != ''">
                and p.title like "%"#{title}"%"
            </if>
            <if test="city != null and city != ''">
                and p.address like "%"#{city}"%"
            </if>
            and p.audit_status = 'AUDIT_PASS'
    </select>

    <select id="queryListAll" resultMap="poemResultMap">
        SELECT
            p.*,
            u.avatar,
            u.NAME u_name,
            m.id m_id,
            m.store_name m_store_name,
            ( SELECT COUNT( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likeCount,
            ( SELECT AVG( score ) FROM node_like pl WHERE pl.node_id = p.id ) AS likes
            <if test="userId != null">
                ,( SELECT count( 1 ) FROM node_like pl WHERE pl.node_id = p.id AND pl.user_id = #{userId} ) AS is_like
            </if>
        FROM
            node p,
            USER u
            left join merchant m on m.user_id = u.id
        WHERE
            p.user_id = u.id
            <if test="title != null and title != ''">
                and p.title like "%"#{title}"%"
            </if>
            <if test="city != null and city != ''">
                and p.address like "%"#{city}"%"
            </if>
        ORDER BY p.id desc
    </select>


</mapper>